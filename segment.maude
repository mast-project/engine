fmod SEGMENT{X :: TRIV} is

    protecting NAT .

    sort Item{X} .
    sort Segment{X} .
    sort NeSegment{X} .
    subsort Item{X} < NeSegment{X} < Segment{X} .

    op [_] : X$Elt -> Item{X} [ctor] .

    op epsilon : -> Segment{X} [ctor] .
    op __ : Segment{X} Segment{X} -> Segment{X} [ctor assoc id: epsilon prec 25] .
    op __ : NeSegment{X} Segment{X} -> NeSegment{X} [ctor assoc id: epsilon prec 25] .
    op __ : Segment{X} NeSegment{X} -> NeSegment{X} [ctor assoc id: epsilon prec 25] .

    sorts Boundary{X} Prefix{X} Suffix{X} FullWord{X} .
    subsort Prefix{X} Suffix{X} < NeSegment{X} .
    subsort FullWord{X} < Prefix{X} Suffix{X} .
    subsort Boundary{X} < Item{X} .
    subsort Boundary{X} < FullWord{X} .

    op # : -> Boundary{X} .

    op __ : Segment{X} Suffix{X} -> Suffix{X} [ctor assoc id: epsilon prec 25] .
    op __ : Prefix{X} Segment{X} -> Prefix{X} [ctor assoc id: epsilon prec 25] .
    op __ : Prefix{X} Suffix{X} -> FullWord{X} [ctor assoc id: epsilon prec 25] .

    vars X X1 X2 : Item{X} .
    vars S S1 S2 : Segment{X} .
    vars N P P1 P2 P3 P4 : Nat .

    eq # # = # .
    eq X1 # X2 = X1 X2 .

    op length : Segment{X} -> Nat .
    eq length(epsilon) = 0 .
    eq length(X S) = s length(S) .

    op reverse : Segment{X} -> Segment{X} .
    eq reverse(epsilon) = epsilon .
    eq reverse(X S) = reverse(S) X .

endfm

fmod QID-SEGMENT is

    protecting SEGMENT{Qid} .

endfm

view Char from TRIV to STRING is

    sort Elt to Char .

endv

fmod CHAR-SEGMENT is

    protecting NAT .
    protecting STRING .
    protecting SEGMENT{Char} .

    op stringToSegment : String -> Segment{Char} .
    eq stringToSegment("") = epsilon .
    eq stringToSegment(S:String) = [substr(S:String, 0, 1)] stringToSegment(substr(S:String, 1, sd(length(S:String), 1))) .

endfm
