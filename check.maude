mod CHECK is
    protecting META-LEVEL .
    protecting NAT .
    protecting CONVERSION .
    protecting EXT-BOOL .

	sort Hypothesis .
    sort GroundHypothesis .

    subsort GroundHypothesis < Hypothesis .

    sort Entailment .

    var Ent : Entailment .

    var M : Module .

    var D I0 : Nat .

    var I : NzNat .

    var N F : Qid .

    var Op : OpDecl .
    var OpS : OpDeclSet .

    var TL : TypeList .
    var NeTL : NeTypeList . 
    vars RT Ty : Type .
    vars Sr Sr0 : Sort .

    vars T T1 T2 : Term .
    vars GT GT1 GT2 : GroundTerm .
    var NTL : NeTermList .

    var AS : AttrSet .

    var C C1 : Condition .

    var Th : Substitution .

    var Eq : Equation .
    var EqS : EquationSet .

    var Mb : MembAx .
    var MbS : MembAxSet .

    var R : Rule .
    var RS : RuleSet .

    sort TypedVariable .
    sort TypedVariableSet .
    subsort TypedVariable < TypedVariableSet .

    var V : Variable .
    var TV : TypedVariable .
    vars TVS TVS1 : TypedVariableSet .

    op none : -> TypedVariableSet [ctor] .
    op {_:_} : Variable Type -> TypedVariable [ctor] .
    op __ : TypedVariableSet TypedVariableSet -> TypedVariableSet [ctor assoc comm id: (none).TypedVariableSet prec 40] .
    
    eq TV TV = TV .

    op tauto : -> GroundHypothesis [ctor] .
    
    op [_=_] : Term Term -> Hypothesis [ctor] .
    op [_=_] : GroundTerm GroundTerm -> GroundHypothesis [ctor] .

    op [_:_] : Term Sort -> Hypothesis [ctor] .
    op [_:_] : GroundTerm Sort -> GroundHypothesis [ctor] .
    
    op [_=>_] : Term Term -> Hypothesis [ctor] .
    op [_=>_] : GroundTerm Term -> GroundHypothesis [ctor] .

    op let_=_in_ : Term Term Hypothesis -> Hypothesis [ctor prec 15] .

    op forall_:_ : TypedVariableSet Hypothesis -> Hypothesis [ctor prec 15] .

    op _->_ : Hypothesis Hypothesis -> Hypothesis [ctor prec 61 gather (E e)] .
    op _->_ : GroundHypothesis GroundHypothesis -> GroundHypothesis [ctor prec 61 gather (E e)] .

    vars H H1 H2 : Hypothesis .
    vars GH GH1 GH2 : GroundHypothesis .
    
	op |-_ : Module -> Entailment [ctor]  .
	op _|-_ : Module Hypothesis -> Entailment [ctor prec 64] .
    op _|-/-_ : Module GroundHypothesis -> Entailment [ctor prec 64] .

    op $constant : Qid Type -> Constant [memo] .
    eq $constant(N, RT)  = qid(string(N) + "." + string(RT)) .

    op $qid : Qid -> Constant [memo] .
    eq $qid(N) = qid("'" + string(N) + ".Qid") .
	
    var Const : Constant .

    op _\_ : TypedVariableSet TypedVariableSet -> TypedVariableSet [gather (E e)] .

    eq (TV TVS) \ (TV TVS1) = TVS \ TVS1 .
    eq TVS \ TVS1 = TVS [owise] .
    
    op termVars : Term -> TypedVariableSet  .
    op termVars : TermList -> TypedVariableSet  .
    
    eq termVars(V) = {V : getType(V)} .
    eq termVars(Const) = (none).TypedVariableSet .
    eq termVars(F[NTL]) = termVars(NTL) .
    eq termVars(empty) = (none).TypedVariableSet .
    eq termVars((T, NTL)) = termVars(T) termVars(NTL) .

    op freeVars : Hypothesis -> TypedVariableSet .
    eq freeVars(tauto) = (none).TypedVariableSet .
    eq freeVars([T1 = T2]) = termVars(T1) termVars(T2) .
    eq freeVars([T : Sr]) = termVars(T) .
    eq freeVars([T1 => T2]) = termVars(T1) termVars(T2) .
    eq freeVars(let T1 = T2 in H) = freeVars(H) termVars(T2) \ termVars(T1) .
    eq freeVars(forall TVS : H) = freeVars(H) \ TVS .
    eq freeVars(H1 -> H2) = freeVars(H1) freeVars(H2) .
    
	op substitute : Substitution Term -> Term  .
	op substitute : Substitution TermList -> TermList .
    op substitute : Substitution Hypothesis -> Hypothesis .

	eq substitute(Th, empty) = empty .
	eq substitute(Th, (T, NTL)) = substitute(Th, T), substitute(Th, NTL) .
	eq substitute((V <- T1 ; Th), V) = T1 .
	eq substitute(Th, F[NTL]) = F[substitute(Th, NTL)] .
	eq substitute(Th, T) = T [owise] .

    eq substitute(Th, tauto) = tauto .
    eq substitute(Th, [T1 = T2]) = [substitute(Th, T1) = substitute(Th, T2)] .
    eq substitute(Th, [T1 => T2]) = [substitute(Th, T1) => substitute(Th, T2)] .
    eq substitute(Th, [T : Sr]) = [substitute(Th, T) : Sr] .
    eq substitute(Th, H1 -> H2) = substitute(Th, H1) -> substitute(Th, H2) .
    eq substitute(Th, let T1 = T2 in H) = let substitute(Th, T1) = substitute(Th, T2) in substitute(Th, H) .
    eq substitute(Th, forall TVS : H) = forall TVS : substitute(Th, H) .

    op statementToHypothesis : Equation -> Hypothesis .
    op statementToHypothesis : MembAx -> Hypothesis .
    op statementToHypothesis : Rule -> Hypothesis .
    
    op conditionToHypothesis : Condition Hypothesis -> Hypothesis .

    eq statementToHypothesis(eq T1 = T2 [AS] .) = [T1 = T2] .
    eq statementToHypothesis(ceq T1 = T2 if C [AS] .) = conditionToHypothesis(C, [T1 = T2]) .

    eq statementToHypothesis(mb T : Sr [AS] .) = [T : Sr] .
    eq statementToHypothesis(cmb T : Sr if C [AS] .) = conditionToHypothesis(C, [T : Sr]) .

    eq statementToHypothesis(rl T1 => T2 [AS] .) = [T1 => T2] .
    eq statementToHypothesis(crl T1 => T2 if C [AS] .) = conditionToHypothesis(C, [T1 => T2]) .

    eq conditionToHypothesis(nil, H) = H .
    eq conditionToHypothesis(T1 = T2 /\ C, H) = [T1 = T2] -> conditionToHypothesis(C, H) .
    eq conditionToHypothesis(T : Sr /\ C, H) = [T : Sr] -> conditionToHypothesis(C, H) .
    eq conditionToHypothesis(T1 => T2 /\ C, H) = [T1 => T2] -> conditionToHypothesis(C, H) .
    eq conditionToHypothesis(T1 := T2 /\ C, H) = let T1 = T2 in conditionToHypothesis(C, H) .
    
    op closeHypothesis : Hypothesis -> Hypothesis .
    eq closeHypothesis(H) = forall freeVars(H) : H .

	op isNonexec : Equation -> Bool .
	op isNonexec : MembAx -> Bool .
	op isNonexec : Rule -> Bool .

	eq isNonexec(eq T1 = T2 [nonexec AS] .) = true .
    eq isNonexec(eq T1 = T2 [AS] .) = false .
	eq isNonexec(ceq T1 = T2 if C [nonexec AS] .) = true .
    eq isNonexec(ceq T1 = T2 if C [AS] .) = false [owise] .

	eq isNonexec(mb T : Sr [nonexec AS] .) = true .
    eq isNonexec(mb T : Sr [AS] .) = false [owise] .
	eq isNonexec(cmb T : Sr if C [nonexec AS] .) = true  .
    eq isNonexec(cmb T : Sr if C [AS] .) = false [owise]  .

	eq isNonexec(rl T1 => T2 [nonexec AS] .) = true .
    eq isNonexec(rl T1 => T2 [AS] .) = false [owise] .
	eq isNonexec(crl T1 => T2 if C [nonexec AS] .) = true .
    eq isNonexec(crl T1 => T2 if C [AS] .) = false [owise] .

    op $makeTypeArgs : Variable NeTypeList Nat -> NeTermList .
    op $makeTypeArg : Variable Type Nat -> Variable .

    eq $makeTypeArgs(V, Ty, I0) = $makeTypeArg(V, Ty, I0) .
    eq $makeTypeArgs(V, Ty NeTL, I0) = $makeTypeArg(V, Ty, I0), $makeTypeArgs(V, NeTL, s I0) .

    eq $makeTypeArg(V, Ty, I0) = qid(string(V) + "." + string(I0, 10) + ":" + string(Ty)) .

    op $satisfy : Module GroundHypothesis -> Bool .

    eq $satisfy(M, tauto) = true .
    eq $satisfy(M, GH1 -> GH2) = if $satisfy(M, GH1) then $satisfy(M, GH2) else true fi .
    eq $satisfy(M, [GT1 = GT2]) = metaReduce(M, GT1) == metaReduce(M, GT2) .
    ceq $satisfy(M, [GT : Sr]) = sortLeq(M, Sr0, Sr) if {T, Sr0} := metaReduce(M, GT) .
    eq $satisfy(M, [GT1 => T2]) = metaSearch(M, GT1, T2, nil, '*, unbounded, 0) :: ResultTriple  .
    eq $satisfy(M, GH) = false [owise] .
    
	crl |- M => M |- closeHypothesis(statementToHypothesis(Eq)) if Eq EqS := getEqs(M) /\ isNonexec(Eq) .
	crl |- M => M |- closeHypothesis(statementToHypothesis(Mb)) if Mb MbS := getMbs(M) /\ isNonexec(Mb) .
	crl |- M => M |- closeHypothesis(statementToHypothesis(R)) if R RS := getRls(M) /\ isNonexec(R) .

	rl M |- forall none : H => M |- H .
	crl M |- GH => Ent if Ent := if $satisfy(M, GH) then M |- tauto else M |-/- GH fi .
	crl M |- GH -> H1 => M |- H2 if H2 := if $satisfy(M, GH) then H1 else tauto fi .
	crl M |- let T1 = GT in H => M |- substitute(Th, H) if 
		  {Th, Ctx:Context} := metaXmatch(M, T1, GT, nil, 0, 0, 0) .
    rl M |- forall {V : 'Qid} TVS : H => M |- forall TVS : substitute(V <- $qid(V), H) .
	crl M |- forall {V : Ty} TVS : H => M |- forall TVS : substitute(V <- $constant(F, RT), H) if
		  (op F : nil -> RT [ctor AS] .) OpS := getOps(M) /\ sortLeq(M, RT, Ty) .
	crl M |- forall {V : Ty} TVS : H => M |- forall TVS : substitute(V <- F[$makeTypeArgs(V, NeTL, 0)], H) if
		(op F : NeTL -> RT [ctor AS] .) OpS := getOps(M) /\ sortLeq(M, RT, Ty) .

		
endm


